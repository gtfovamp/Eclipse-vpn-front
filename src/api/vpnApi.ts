import { VPNServer } from '../types/vpn';

const API_URL = 'https://eclipse-vpn-api.onrender.com/vpn-data/';

// –û–ø—Ä–µ–¥–µ–ª–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ API
interface ApiResponse {
  host: string;
  ip: string;
  score: number;
  ping: number;
  speed: number;
  country: string;
  sessions: number;
  uptime: number;
  total_users: number;
  total_traffic: number;
  config: string;
}

export const getServerStatus = (load: number): 'active' | 'high-load' | 'offline' => {
  if (load < 50) return 'active';
  if (load < 85) return 'high-load';
  return 'offline';
};

export const getStatusEmoji = (status: string): string => {
  switch (status) {
    case 'active':
      return 'üü¢';
    case 'high-load':
      return 'üü°';
    case 'offline':
      return 'üî¥';
    default:
      return '‚ö™';
  }
};

export const getProtocolIcon = (protocol: string): string => {
  switch (protocol.toLowerCase()) {
    case 'wireguard':
      return 'üõ°Ô∏è';
    case 'openvpn':
      return 'üîí';
    default:
      return 'üîê';
  }
};

export const fetchVPNServers = async (): Promise<VPNServer[]> => {
  try {
    console.log(1);
    const response = await fetch(API_URL);
    console.log(2);
    if (!response.ok) {
      throw new Error(`API error: ${response.status}`);
    }
    
    const data: ApiResponse[] = await response.json();
    console.log(3);
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ API –≤ —Ñ–æ—Ä–º–∞—Ç VPNServer
    return data.map((server): VPNServer => ({
      id: server.ip,  // –ò—Å–ø–æ–ª—å–∑—É–µ–º IP –∫–∞–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
      host: server.host,
      ip: server.ip,
      score: server.score,
      ping: server.ping,
      speed: server.speed,
      country: server.country,
      sessions: server.sessions,
      uptime: server.uptime,
      total_users: server.total_users,
      total_traffic: server.total_traffic,
      config: server.config,
      status: getServerStatus(server.sessions), // –ò—Å–ø–æ–ª—å–∑—É–µ–º sessions –∫–∞–∫ –Ω–∞–≥—Ä—É–∑–∫—É
      flag: 'üåê',  // –î–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏–∫—É –¥–ª—è —Ñ–ª–∞–≥–æ–≤ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
      protocol: server.config.includes('udp') ? 'OpenVPN UDP' : 'OpenVPN TCP',
      emoji: getStatusEmoji(getServerStatus(server.sessions))
    }));
  } catch (error) {
    console.error('Failed to fetch VPN servers:', error);
    return [];
  }
};